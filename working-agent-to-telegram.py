from uagents import Agent, Context, Bureau, Model
import telegram, asyncio
from uagents.setup import fund_agent_if_low
from testing_voice_rec import live_chat
from playsound import playsound
import contextlib, time
from computer_vision import c_vision, choose_media

class Message(Model):
    message: str

class ContextPrompt(Model):
    context: str
    text: str

class Response(Model):
    text: str

AGENT_MAILBOX_KEY = "MAILBOX_KEY"
SEED_PHRASE = "bike test"

agent = Agent(
    name="mary",
    seed=SEED_PHRASE,
    mailbox=f"{AGENT_MAILBOX_KEY}@https://agentverse.ai",
) #he is deciding based on video if need to check - True or False from chatgpt
fund_agent_if_low(agent.wallet.address())
print(agent.address)

AI_AGENT_ADDRESS = "AGENT_ADRESS"

boolie = Agent(name="boolie", seed="boolie recovery phrase") #he initiates the question and listens for return
bob = Agent(name="bob", seed="bob recovery phrase") #he talks to telegram if needed

FILE_NAME = "agent_message.txt"
MEDIA_FILE_NAME = choose_media()


with open(FILE_NAME, "w") as f:
    with contextlib.redirect_stdout(f):
        c_vision(MEDIA_FILE_NAME)
with open(FILE_NAME, "r") as file:
    transcript = file.read()

prompt = ContextPrompt(
    context="This is information generated by google clound video intelligence."
                "Based on the information provided tell me if there are some signs that the person from the video fell off the bike. "
                "You must give only one word in the output. Output False only if the person definitely did not fall. Output True otherwise. "
                "Do not state your reasoning.\n\n",
    text=transcript,
)


@agent.on_event("startup")
async def send_message(ctx: Context):
    await ctx.send(AI_AGENT_ADDRESS, prompt)

@agent.on_message(Response)
async def handle_response(ctx: Context, sender: str, msg: Response):
    ctx.logger.info(f"Received response from {sender}: {msg.text}")
    time.sleep(3)
    await ctx.send(boolie.address, Message(message=msg.text))



bot_token = "TG_TOKEN"
chat_id=CHAT_ID


async def send_tg(msg, chat_id, token=bot_token):
    bot = telegram.Bot(token=token)
    await bot.sendMessage(chat_id=chat_id, text=msg)
    print('Message Sent!')

 
@boolie.on_message(model=Message) #ask question if he is okay. False - does not need help. True - needs help.
async def boolie_message_handler(ctx: Context, sender: str, mssg: Message):
    if mssg.message == "False":
        print("all is fine, we don't need to ask")
    else:
        playsound("query.mp3")
        print("We can start speaking")
        message_text = live_chat()
        print("Based on audio our verdict is: ", message_text)
        time.sleep(3)
        if message_text == "True":
            await ctx.send(bob.address, Message(message="True"))
        else:
            print("all is okay")

@bob.on_message(model=Message)
async def bob_message_handler(ctx: Context, sender: str, mssg: Message):
    if mssg.message == "True":
        message_text="Person in trouble! Send messages."
        print("Based Message we need to communicate: ", message_text)
        await send_tg(msg=message_text, chat_id=chat_id, token=bot_token)
    else:
        print("We don't need help, thank you")



# Message to send

bureau = Bureau()
bureau.add(boolie)
bureau.add(agent)
bureau.add(bob)
 
 
# This constructor simply ensure that only this script is running
if __name__ == "__main__":
    bureau.run()
